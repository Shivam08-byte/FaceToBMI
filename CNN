{
 "nbformat": 4,
 "nbformat_minor": 2,
 "metadata": {
  "language_info": {
   "name": "python",
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "version": "3.6.9"
  },
  "orig_nbformat": 2,
  "file_extension": ".py",
  "mimetype": "text/x-python",
  "name": "python",
  "npconvert_exporter": "python",
  "pygments_lexer": "ipython3",
  "version": 3
 },
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "import torch\n",
    "import torch.nn as nn"
   ]
  },
  {
   "cell_type": "markdown",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (<ipython-input-21-43be31ca26e4>, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-21-43be31ca26e4>\"\u001b[0;36m, line \u001b[0;32m1\u001b[0m\n\u001b[0;31m    Convolutional Network\u001b[0m\n\u001b[0m                        ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "Convolutional Network\n",
    "* inputs: 1 channels\n",
    "* 1 activantion maps\n",
    "* Filters are 2x2\n",
    "* Padding with zero"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": "Parameter containing:\ntensor([[[[-0.4626, -0.4851],\n          [-0.4967, -0.0689]]]], requires_grad=True)\ntorch.Size([1, 1, 2, 2])\n"
    }
   ],
   "source": [
    "conv_layer = nn.Conv2d(1,1,kernel_size=2)\n",
    "print(conv_layer.weight)\n",
    "print(conv_layer.weight.size())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": "tensor([[[[0.0658, 0.8021, 0.8884],\n          [0.8799, 0.7798, 0.4307],\n          [0.2562, 0.8417, 0.1894]]]])\n"
    }
   ],
   "source": [
    "batch_size = 1\n",
    "inputs = torch.rand(batch_size,1,3,3)\n",
    "print(inputs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": "tensor([[[[-0.8803, -1.1890],\n          [-0.9406, -0.9708]]]], grad_fn=<MkldnnConvolutionBackward>)\n"
    }
   ],
   "source": [
    "y = conv_layer(inputs)\n",
    "print(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": "tensor([[[[-0.8803]]]], grad_fn=<MaxPool2DWithIndicesBackward>)\n"
    }
   ],
   "source": [
    "max_pool = nn.MaxPool2d(2,2)\n",
    "y_hat = max_pool(y)\n",
    "print(y_hat)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ]
}