{
 "nbformat": 4,
 "nbformat_minor": 2,
 "metadata": {
  "language_info": {
   "name": "python",
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "version": "3.6.9"
  },
  "orig_nbformat": 2,
  "file_extension": ".py",
  "mimetype": "text/x-python",
  "name": "python",
  "npconvert_exporter": "python",
  "pygments_lexer": "ipython3",
  "version": 3
 },
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.nn.functional as F\n",
    "import torch.optim as optim\n",
    "from random import randint\n",
    "import utils\n",
    "import time"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": "cuda\n"
    }
   ],
   "source": [
    "device = torch.device(\"cuda\")\n",
    "# device = torch.device(\"cpu\")\n",
    "print(device)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": "torch.Size([10000])\n"
    }
   ],
   "source": [
    "from utils import check_cifar_dataset_exists\n",
    "data_path = check_cifar_dataset_exists()\n",
    "train_data = torch.load(data_path+\"cifar/train_data.pt\")\n",
    "train_label = torch.load(data_path+\"cifar/train_label.pt\")\n",
    "test_data = torch.load(data_path+\"cifar/test_data.pt\")\n",
    "test_label = torch.load(data_path+\"cifar/test_label.pt\")\n",
    "print(test_label.size())"
   ]
  },
  {
   "cell_type": "markdown",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "### Create network"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": "three_layer_net(\n  (layer1): Linear(in_features=3072, out_features=500, bias=False)\n  (layer2): Linear(in_features=500, out_features=500, bias=False)\n  (layer3): Linear(in_features=500, out_features=10, bias=False)\n)\n"
    }
   ],
   "source": [
    "class three_layer_net(nn.Module):\n",
    "    def __init__(self, input_size, hidden_size1, hidden_size2, output_size):\n",
    "        super(three_layer_net, self).__init__()\n",
    "        self.layer1 = nn.Linear(input_size, hidden_size1, bias=False)\n",
    "        self.layer2 = nn.Linear(hidden_size1, hidden_size2, bias=False)\n",
    "        self.layer3 = nn.Linear(hidden_size2, output_size, bias=False)\n",
    "    def forward(self, x):\n",
    "        y = self.layer1(x)\n",
    "        y_hat = F.relu(y)\n",
    "        z = self.layer2(y_hat)\n",
    "        z_hat = F.relu(z)\n",
    "        scores = self.layer3(z_hat)\n",
    "        return scores\n",
    "\n",
    "net = three_layer_net(3072, 500, 500, 10)\n",
    "# utils.display_num_param(net)\n",
    "net = net.to(device)\n",
    "print(net)"
   ]
  },
  {
   "cell_type": "markdown",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "### Setting criterion"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "criterion = nn.CrossEntropyLoss()\n",
    "optimizer = optim.SGD(net.parameters(), lr=0.01)\n",
    "bs = 200"
   ]
  },
  {
   "cell_type": "markdown",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "### Function to run test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "def eval_on_test_set():\n",
    "    running_error = 0\n",
    "    num_batches = 0\n",
    "    for i in range(0, 10000,bs):\n",
    "        minibatch_data = test_data[i:i+bs]\n",
    "        minibatch_label = test_label[i:i+bs]\n",
    "\n",
    "        # Send data to the GPU\n",
    "        minibatch_data = minibatch_data.to(device)\n",
    "        minibatch_label = minibatch_label.to(device)\n",
    "\n",
    "        # Reshape\n",
    "        inputs = minibatch_data.view(bs, 3072)\n",
    "        scores = net(inputs)\n",
    "        \n",
    "        # Calculate error\n",
    "        error = utils.get_error(scores, minibatch_label)\n",
    "        running_error += error.item()\n",
    "        num_batches += 1\n",
    "    total_error = running_error/num_batches\n",
    "    print(\"Error on testing dataset:\", total_error*100)"
   ]
  },
  {
   "cell_type": "markdown",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "### Training with 200 epochs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": "Epoch= 0  time= 0.8236792087554932  loss= 2.246888521194458  error 82.2740005016327\nError on testing dataset: 76.87000000476837\n---------\nEpoch= 50  time= 35.36853051185608  loss= 1.356490988254547  error 47.79800090789795\nError on testing dataset: 50.17000019550324\n---------\nEpoch= 100  time= 69.41368770599365  loss= 1.1203358647823334  error 39.30800149440765\nError on testing dataset: 46.370001435279846\n---------\nEpoch= 150  time= 103.3963258266449  loss= 0.9225745182037354  error 32.18800156116486\nError on testing dataset: 46.45000076293945\n---------\n"
    }
   ],
   "source": [
    "start_time = time.time()\n",
    "for epoch in range(200):\n",
    "    running_loss = 0\n",
    "    running_error = 0\n",
    "    num_batches = 0\n",
    "    shuffled_indices = torch.randperm(50000)\n",
    "    for count in range(0, 50000, bs):\n",
    "\n",
    "        # create a minibatch  \n",
    "        indices = shuffled_indices[count:count+bs]\n",
    "        minibatch_data = train_data[indices]\n",
    "        minibatch_label = train_label[indices]\n",
    "\n",
    "        # Set the gradients to zeros\n",
    "        optimizer.zero_grad()\n",
    "\n",
    "        # reshape the minibatch\n",
    "        minibatch_data = minibatch_data.to(device)\n",
    "        minibatch_label = minibatch_label.to(device)\n",
    "        inputs = minibatch_data.view(bs, 3072)\n",
    "\n",
    "        # tell Pytorch to start tracking all operations that will be done on \"inputs\"\n",
    "        inputs.requires_grad_()\n",
    "\n",
    "        scores = net(inputs)\n",
    "        loss = criterion(scores, minibatch_label)\n",
    "        loss.backward()\n",
    "        optimizer.step()\n",
    "\n",
    "        # Computing statistics\n",
    "        running_loss += loss.detach().item()\n",
    "        error = utils.get_error(scores.detach(), minibatch_label)\n",
    "        running_error += error.item()\n",
    "        num_batches += 1\n",
    "    # Compute the stat\n",
    "    total_loss = running_loss/num_batches\n",
    "    total_error = running_error/num_batches*100\n",
    "    eslapsed = time.time() - start_time\n",
    "\n",
    "    if epoch%50 == 0:\n",
    "        print(\"Epoch=\", epoch, \" time=\", eslapsed, \" loss=\", total_loss, \" error\", total_error)\n",
    "        eval_on_test_set()\n",
    "        print(\"---------\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "image/svg+xml": "<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n  \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Created with matplotlib (https://matplotlib.org/) -->\n<svg height=\"248.919844pt\" version=\"1.1\" viewBox=\"0 0 251.565 248.919844\" width=\"251.565pt\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n <defs>\n  <style type=\"text/css\">\n*{stroke-linecap:butt;stroke-linejoin:round;}\n  </style>\n </defs>\n <g id=\"figure_1\">\n  <g id=\"patch_1\">\n   <path d=\"M 0 248.919844 \nL 251.565 248.919844 \nL 251.565 0 \nL 0 0 \nz\n\" style=\"fill:none;\"/>\n  </g>\n  <g id=\"axes_1\">\n   <g id=\"patch_2\">\n    <path d=\"M 26.925 225.041719 \nL 244.365 225.041719 \nL 244.365 7.601719 \nL 26.925 7.601719 \nz\n\" style=\"fill:#ffffff;\"/>\n   </g>\n   <g clip-path=\"url(#p73bfe13822)\">\n    <image height=\"218\" id=\"imagef3dc0c289f\" transform=\"scale(1 -1)translate(0 -218)\" width=\"218\" x=\"26.925\" xlink:href=\"data:image/png;base64,\n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\" y=\"-7.041719\"/>\n   </g>\n   <g id=\"matplotlib.axis_1\">\n    <g id=\"xtick_1\">\n     <g id=\"line2d_1\">\n      <defs>\n       <path d=\"M 0 0 \nL 0 3.5 \n\" id=\"mef00e96340\" style=\"stroke:#000000;stroke-width:0.8;\"/>\n      </defs>\n      <g>\n       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"30.3225\" xlink:href=\"#mef00e96340\" y=\"225.041719\"/>\n      </g>\n     </g>\n     <g id=\"text_1\">\n      <!-- 0 -->\n      <defs>\n       <path d=\"M 31.78125 66.40625 \nQ 24.171875 66.40625 20.328125 58.90625 \nQ 16.5 51.421875 16.5 36.375 \nQ 16.5 21.390625 20.328125 13.890625 \nQ 24.171875 6.390625 31.78125 6.390625 \nQ 39.453125 6.390625 43.28125 13.890625 \nQ 47.125 21.390625 47.125 36.375 \nQ 47.125 51.421875 43.28125 58.90625 \nQ 39.453125 66.40625 31.78125 66.40625 \nz\nM 31.78125 74.21875 \nQ 44.046875 74.21875 50.515625 64.515625 \nQ 56.984375 54.828125 56.984375 36.375 \nQ 56.984375 17.96875 50.515625 8.265625 \nQ 44.046875 -1.421875 31.78125 -1.421875 \nQ 19.53125 -1.421875 13.0625 8.265625 \nQ 6.59375 17.96875 6.59375 36.375 \nQ 6.59375 54.828125 13.0625 64.515625 \nQ 19.53125 74.21875 31.78125 74.21875 \nz\n\" id=\"DejaVuSans-48\"/>\n      </defs>\n      <g transform=\"translate(27.14125 239.640156)scale(0.1 -0.1)\">\n       <use xlink:href=\"#DejaVuSans-48\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"xtick_2\">\n     <g id=\"line2d_2\">\n      <g>\n       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"64.2975\" xlink:href=\"#mef00e96340\" y=\"225.041719\"/>\n      </g>\n     </g>\n     <g id=\"text_2\">\n      <!-- 5 -->\n      <defs>\n       <path d=\"M 10.796875 72.90625 \nL 49.515625 72.90625 \nL 49.515625 64.59375 \nL 19.828125 64.59375 \nL 19.828125 46.734375 \nQ 21.96875 47.46875 24.109375 47.828125 \nQ 26.265625 48.1875 28.421875 48.1875 \nQ 40.625 48.1875 47.75 41.5 \nQ 54.890625 34.8125 54.890625 23.390625 \nQ 54.890625 11.625 47.5625 5.09375 \nQ 40.234375 -1.421875 26.90625 -1.421875 \nQ 22.3125 -1.421875 17.546875 -0.640625 \nQ 12.796875 0.140625 7.71875 1.703125 \nL 7.71875 11.625 \nQ 12.109375 9.234375 16.796875 8.0625 \nQ 21.484375 6.890625 26.703125 6.890625 \nQ 35.15625 6.890625 40.078125 11.328125 \nQ 45.015625 15.765625 45.015625 23.390625 \nQ 45.015625 31 40.078125 35.4375 \nQ 35.15625 39.890625 26.703125 39.890625 \nQ 22.75 39.890625 18.8125 39.015625 \nQ 14.890625 38.140625 10.796875 36.28125 \nz\n\" id=\"DejaVuSans-53\"/>\n      </defs>\n      <g transform=\"translate(61.11625 239.640156)scale(0.1 -0.1)\">\n       <use xlink:href=\"#DejaVuSans-53\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"xtick_3\">\n     <g id=\"line2d_3\">\n      <g>\n       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"98.2725\" xlink:href=\"#mef00e96340\" y=\"225.041719\"/>\n      </g>\n     </g>\n     <g id=\"text_3\">\n      <!-- 10 -->\n      <defs>\n       <path d=\"M 12.40625 8.296875 \nL 28.515625 8.296875 \nL 28.515625 63.921875 \nL 10.984375 60.40625 \nL 10.984375 69.390625 \nL 28.421875 72.90625 \nL 38.28125 72.90625 \nL 38.28125 8.296875 \nL 54.390625 8.296875 \nL 54.390625 0 \nL 12.40625 0 \nz\n\" id=\"DejaVuSans-49\"/>\n      </defs>\n      <g transform=\"translate(91.91 239.640156)scale(0.1 -0.1)\">\n       <use xlink:href=\"#DejaVuSans-49\"/>\n       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-48\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"xtick_4\">\n     <g id=\"line2d_4\">\n      <g>\n       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"132.2475\" xlink:href=\"#mef00e96340\" y=\"225.041719\"/>\n      </g>\n     </g>\n     <g id=\"text_4\">\n      <!-- 15 -->\n      <g transform=\"translate(125.885 239.640156)scale(0.1 -0.1)\">\n       <use xlink:href=\"#DejaVuSans-49\"/>\n       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-53\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"xtick_5\">\n     <g id=\"line2d_5\">\n      <g>\n       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"166.2225\" xlink:href=\"#mef00e96340\" y=\"225.041719\"/>\n      </g>\n     </g>\n     <g id=\"text_5\">\n      <!-- 20 -->\n      <defs>\n       <path d=\"M 19.1875 8.296875 \nL 53.609375 8.296875 \nL 53.609375 0 \nL 7.328125 0 \nL 7.328125 8.296875 \nQ 12.9375 14.109375 22.625 23.890625 \nQ 32.328125 33.6875 34.8125 36.53125 \nQ 39.546875 41.84375 41.421875 45.53125 \nQ 43.3125 49.21875 43.3125 52.78125 \nQ 43.3125 58.59375 39.234375 62.25 \nQ 35.15625 65.921875 28.609375 65.921875 \nQ 23.96875 65.921875 18.8125 64.3125 \nQ 13.671875 62.703125 7.8125 59.421875 \nL 7.8125 69.390625 \nQ 13.765625 71.78125 18.9375 73 \nQ 24.125 74.21875 28.421875 74.21875 \nQ 39.75 74.21875 46.484375 68.546875 \nQ 53.21875 62.890625 53.21875 53.421875 \nQ 53.21875 48.921875 51.53125 44.890625 \nQ 49.859375 40.875 45.40625 35.40625 \nQ 44.1875 33.984375 37.640625 27.21875 \nQ 31.109375 20.453125 19.1875 8.296875 \nz\n\" id=\"DejaVuSans-50\"/>\n      </defs>\n      <g transform=\"translate(159.86 239.640156)scale(0.1 -0.1)\">\n       <use xlink:href=\"#DejaVuSans-50\"/>\n       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-48\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"xtick_6\">\n     <g id=\"line2d_6\">\n      <g>\n       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"200.1975\" xlink:href=\"#mef00e96340\" y=\"225.041719\"/>\n      </g>\n     </g>\n     <g id=\"text_6\">\n      <!-- 25 -->\n      <g transform=\"translate(193.835 239.640156)scale(0.1 -0.1)\">\n       <use xlink:href=\"#DejaVuSans-50\"/>\n       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-53\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"xtick_7\">\n     <g id=\"line2d_7\">\n      <g>\n       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"234.1725\" xlink:href=\"#mef00e96340\" y=\"225.041719\"/>\n      </g>\n     </g>\n     <g id=\"text_7\">\n      <!-- 30 -->\n      <defs>\n       <path d=\"M 40.578125 39.3125 \nQ 47.65625 37.796875 51.625 33 \nQ 55.609375 28.21875 55.609375 21.1875 \nQ 55.609375 10.40625 48.1875 4.484375 \nQ 40.765625 -1.421875 27.09375 -1.421875 \nQ 22.515625 -1.421875 17.65625 -0.515625 \nQ 12.796875 0.390625 7.625 2.203125 \nL 7.625 11.71875 \nQ 11.71875 9.328125 16.59375 8.109375 \nQ 21.484375 6.890625 26.8125 6.890625 \nQ 36.078125 6.890625 40.9375 10.546875 \nQ 45.796875 14.203125 45.796875 21.1875 \nQ 45.796875 27.640625 41.28125 31.265625 \nQ 36.765625 34.90625 28.71875 34.90625 \nL 20.21875 34.90625 \nL 20.21875 43.015625 \nL 29.109375 43.015625 \nQ 36.375 43.015625 40.234375 45.921875 \nQ 44.09375 48.828125 44.09375 54.296875 \nQ 44.09375 59.90625 40.109375 62.90625 \nQ 36.140625 65.921875 28.71875 65.921875 \nQ 24.65625 65.921875 20.015625 65.03125 \nQ 15.375 64.15625 9.8125 62.3125 \nL 9.8125 71.09375 \nQ 15.4375 72.65625 20.34375 73.4375 \nQ 25.25 74.21875 29.59375 74.21875 \nQ 40.828125 74.21875 47.359375 69.109375 \nQ 53.90625 64.015625 53.90625 55.328125 \nQ 53.90625 49.265625 50.4375 45.09375 \nQ 46.96875 40.921875 40.578125 39.3125 \nz\n\" id=\"DejaVuSans-51\"/>\n      </defs>\n      <g transform=\"translate(227.81 239.640156)scale(0.1 -0.1)\">\n       <use xlink:href=\"#DejaVuSans-51\"/>\n       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-48\"/>\n      </g>\n     </g>\n    </g>\n   </g>\n   <g id=\"matplotlib.axis_2\">\n    <g id=\"ytick_1\">\n     <g id=\"line2d_8\">\n      <defs>\n       <path d=\"M 0 0 \nL -3.5 0 \n\" id=\"m55baa7695b\" style=\"stroke:#000000;stroke-width:0.8;\"/>\n      </defs>\n      <g>\n       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"26.925\" xlink:href=\"#m55baa7695b\" y=\"10.999219\"/>\n      </g>\n     </g>\n     <g id=\"text_8\">\n      <!-- 0 -->\n      <g transform=\"translate(13.5625 14.798437)scale(0.1 -0.1)\">\n       <use xlink:href=\"#DejaVuSans-48\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"ytick_2\">\n     <g id=\"line2d_9\">\n      <g>\n       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"26.925\" xlink:href=\"#m55baa7695b\" y=\"44.974219\"/>\n      </g>\n     </g>\n     <g id=\"text_9\">\n      <!-- 5 -->\n      <g transform=\"translate(13.5625 48.773437)scale(0.1 -0.1)\">\n       <use xlink:href=\"#DejaVuSans-53\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"ytick_3\">\n     <g id=\"line2d_10\">\n      <g>\n       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"26.925\" xlink:href=\"#m55baa7695b\" y=\"78.949219\"/>\n      </g>\n     </g>\n     <g id=\"text_10\">\n      <!-- 10 -->\n      <g transform=\"translate(7.2 82.748437)scale(0.1 -0.1)\">\n       <use xlink:href=\"#DejaVuSans-49\"/>\n       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-48\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"ytick_4\">\n     <g id=\"line2d_11\">\n      <g>\n       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"26.925\" xlink:href=\"#m55baa7695b\" y=\"112.924219\"/>\n      </g>\n     </g>\n     <g id=\"text_11\">\n      <!-- 15 -->\n      <g transform=\"translate(7.2 116.723437)scale(0.1 -0.1)\">\n       <use xlink:href=\"#DejaVuSans-49\"/>\n       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-53\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"ytick_5\">\n     <g id=\"line2d_12\">\n      <g>\n       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"26.925\" xlink:href=\"#m55baa7695b\" y=\"146.899219\"/>\n      </g>\n     </g>\n     <g id=\"text_12\">\n      <!-- 20 -->\n      <g transform=\"translate(7.2 150.698437)scale(0.1 -0.1)\">\n       <use xlink:href=\"#DejaVuSans-50\"/>\n       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-48\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"ytick_6\">\n     <g id=\"line2d_13\">\n      <g>\n       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"26.925\" xlink:href=\"#m55baa7695b\" y=\"180.874219\"/>\n      </g>\n     </g>\n     <g id=\"text_13\">\n      <!-- 25 -->\n      <g transform=\"translate(7.2 184.673437)scale(0.1 -0.1)\">\n       <use xlink:href=\"#DejaVuSans-50\"/>\n       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-53\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"ytick_7\">\n     <g id=\"line2d_14\">\n      <g>\n       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"26.925\" xlink:href=\"#m55baa7695b\" y=\"214.849219\"/>\n      </g>\n     </g>\n     <g id=\"text_14\">\n      <!-- 30 -->\n      <g transform=\"translate(7.2 218.648437)scale(0.1 -0.1)\">\n       <use xlink:href=\"#DejaVuSans-51\"/>\n       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-48\"/>\n      </g>\n     </g>\n    </g>\n   </g>\n   <g id=\"patch_3\">\n    <path d=\"M 26.925 225.041719 \nL 26.925 7.601719 \n\" style=\"fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;stroke-width:0.8;\"/>\n   </g>\n   <g id=\"patch_4\">\n    <path d=\"M 244.365 225.041719 \nL 244.365 7.601719 \n\" style=\"fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;stroke-width:0.8;\"/>\n   </g>\n   <g id=\"patch_5\">\n    <path d=\"M 26.925 225.041719 \nL 244.365 225.041719 \n\" style=\"fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;stroke-width:0.8;\"/>\n   </g>\n   <g id=\"patch_6\">\n    <path d=\"M 26.925 7.601719 \nL 244.365 7.601719 \n\" style=\"fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;stroke-width:0.8;\"/>\n   </g>\n  </g>\n </g>\n <defs>\n  <clipPath id=\"p73bfe13822\">\n   <rect height=\"217.44\" width=\"217.44\" x=\"26.925\" y=\"7.601719\"/>\n  </clipPath>\n </defs>\n</svg>\n",
      "text/plain": "<Figure size 432x288 with 1 Axes>"
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "ename": "AttributeError",
     "evalue": "module 'utils' has no attribute 'show_prob_cifar'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-10-ddc43f86b60f>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mscores\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnet\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mimage\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mview\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m3072\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdevice\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mprobs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mF\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msoftmax\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mscores\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdim\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m \u001b[0mutils\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshow_prob_cifar\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mprobs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcpu\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mAttributeError\u001b[0m: module 'utils' has no attribute 'show_prob_cifar'"
     ]
    }
   ],
   "source": [
    "idx = randint(0, 10000-1)\n",
    "image = test_data[idx]\n",
    "utils.show(image)\n",
    "scores = net(image.view(1,3072).to(device))\n",
    "probs = F.softmax(scores, dim=1)\n",
    "utils.show_prob_cifar(probs.cpu())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ]
}